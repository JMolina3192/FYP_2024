# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

# variables:
  # Azure Resource Manager connection created during pipeline creation
  # azureServiceConnectionId: 'b3b07ba4-c98c-451d-886b-25a0409a4203'

  # Web app name
  # webAppName: 'fyp2024-app'

  # # # Agent VM image name
  # vmImageName: 'ubuntu-latest'

  # # # Environment name
  # environmentName: 'Test3'

  # # Project root folder. Point to the folder containing manage.py file.
  # projectRoot: $(System.DefaultWorkingDirectory)

  # # Python version: 3.10
  # pythonVersion: '3.10'

# stages:
# - stage: Build
#   displayName: Build stage
#   jobs:
#   - job: BuildJob
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '$(pythonVersion)'
#       displayName: 'Use Python $(pythonVersion)'
#     - script: |
#         python -m venv antenv
#         source antenv/bin/activate
#         python -m pip install --upgrade pip
#         pip install setup
#         pip install -r requirements.txt
#       workingDirectory: $(projectRoot)
#       displayName: "Install requirements"

#     - task: ArchiveFiles@2
#       displayName: 'Archive files'
#       inputs:
#         rootFolderOrFile: '$(projectRoot)'
#         includeRootFolder: false
#         archiveType: zip
#         archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#         replaceExistingArchive: true

#     - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#       displayName: 'Upload package'
#       artifact: drop

# - stage: Deploy
#   displayName: Deploy App
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: DeploymentJob
#     displayName: Web Deploy
#     environment: 
#       name: Test4
#       resourceType: VirtualMachine
#       resourceName: Test4
#     # pool:
#     #   vmImage: $(vmImageName)
#     # environment: $(environmentName)
#     strategy:
#       runOnce:
#         preDeploy:
#           steps:
#           - download: current
#             artifact: drop
#           - script: echo initialize, cleanup, backup
#         deploy:
#           steps:
#           - task: Bash@3
#             inputs:
#               targetType: 'inline'
#               script: |
#                 if ! dpkg -l | grep -qw unzip; then
#                   echo "unzip is not installed. Installing..."
#                   sudo apt-get update
#                   sudo apt-get install -y unzip
#                 fi
#                 echo "Starting deployment script run"
#                 sudo unzip "$(Pipeline.Workspace)/drop/$(Build.BuildId)" -d /home/ubuntu
              
#               # script: |
#               #   sudo apt-get install unzip
#               #   echo "Starting deployment script run"
#               #   sudo unzip $(Pipeline.Workspace)/drop/$(Build.BuildId) -d /home/ubuntu
            

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: BuildJob
        displayName: Build and Archive
        pool:
          vmImage: 'ubuntu-20.04'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.10'
              addToPath: true
            displayName: 'Use Python 3.10'
          - script: |
              python -m venv .venv
              source .venv/bin/activate
              python -m pip install --upgrade pip
              pip install setuptools
              pip install -r requirements.txt
            displayName: 'Set up Python environment and install dependencies'
          - script: |
              zip -r $(Build.ArtifactStagingDirectory)/repository.zip .
            displayName: 'Archive repository'
          - publish: $(Build.ArtifactStagingDirectory)/repository.zip
            artifact: repository
            displayName: 'Publish repository'
            
  - stage: Deploy
    displayName: Deploy App
    jobs:
      - deployment: DeploymentJob
        displayName: Web Deploy
        environment: 
          name: Test4
          resourceType: VirtualMachine
          resourceName: Test4
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: repository
                - script: |
                    unzip $(Pipeline.Workspace)/repository/repository.zip -d /home/ubuntu/
                  displayName: 'Unpack Repository'
                - script: |
                    sudo cp $(Pipeline.Workspace)/repository/fyp.service /etc/systemd/system/
                    sudo systemctl daemon-reload
                    sudo systemctl enable fyp.service
                    echo "Service file deployed and enabled"
                  displayName: 'Deploy Service File'
                - script: |
                    cp -r /home/ubuntu/repository/. /home/ubuntu/
                    cp /home/ubuntu/repository/scripts/fyp.service /etc/systemd/system/
                    echo "Files copied"
                  displayName: 'Copy files'
                - script: |
                    chmod 755 /home/ubuntu/scripts/install_dependencies.sh
                    chmod 755 /home/ubuntu/scripts/start_app.sh
                    chmod 755 /home/ubuntu/scripts/stop_app.sh
                    chown root:root /home/ubuntu/scripts/*.sh
                    echo "Permissions set"
                  displayName: 'Set permissions'
                - script: |
                    sudo /home/ubuntu/scripts/install_dependencies.sh
                  displayName: 'After Install - Install dependencies'
                - script: |
                    sudo /home/ubuntu/scripts/start_app.sh
                    echo "Application started"
                  displayName: 'Application Start'
                  timeoutInMinutes: 5
                # - script: |
                #     # Stop application (if needed for the deployment scenario)
                #     sudo /home/ubuntu/scripts/stop_app.sh
                #     echo "Application stopped"
                #   displayName: 'Application Stop'
                #   timeoutInMinutes: 5
                

