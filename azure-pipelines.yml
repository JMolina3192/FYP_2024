# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
pool: 
   name: Default
   demands:
    - agent.name -equals Local-Agent
variables:
  # Azure Resource Manager connection created during pipeline creation
  # azureServiceConnectionId: 'b3b07ba4-c98c-451d-886b-25a0409a4203'

  # Web app name
  # webAppName: 'fyp2024-app'

  # # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # # Environment name
  environmentName: 'Test3'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.10
  pythonVersion: '3.10'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: Deploy App
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    displayName: Web Deploy
    environment: 
      name: Test3
      resourceType: VirtualMachine
      resourceName: Test3
    # pool:
    #   vmImage: $(vmImageName)
    # environment: $(environmentName)
    strategy:
      runOnce:
        preDeploy:
          steps:
          - download: current
            artifact: drop
          - script: echo initialize, cleanup, backup
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get install unzip
                echo "Starting deployment script run"
                sudo unzip $(Pipeline.Workspace)/drop/$(Build.BuildId) -d /home/azureuser
                rm -r $(Pipeline.Workspace)/drop/$(Build.BuildId)
